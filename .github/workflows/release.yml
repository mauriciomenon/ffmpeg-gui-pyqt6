name: release

on:
  # Manual only; require explicit cost confirmation
  workflow_dispatch:
    inputs:
      confirm_cost:
        description: "Type YES to confirm you understand this release build consumes CI minutes and may incur costs."
        required: true
        default: "NO"
      profile:
        description: "Build profile (minimal = low-cost emergency, full = all OS/arch)"
        required: true
        type: choice
        options:
          - minimal
          - full
        default: minimal

permissions:
  contents: write

jobs:
  build:
    if: ${{ github.event.inputs.confirm_cost == 'YES' }}
    name: Build release artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(github.event.inputs.profile == 'full' && '["windows-latest","windows-11-arm","macos-13","macos-14","ubuntu-latest","ubuntu-22.04-arm"]' || '["ubuntu-latest"]') }}
        python-version: ['3.11']
    env:
      PROFILE: ${{ github.event.inputs.profile }}
      BUILD_PYQT: ${{ github.event.inputs.profile == 'full' && 'true' || 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Qt dev tools (Linux only, full profile)
        if: runner.os == 'Linux' && env.BUILD_PYQT == 'true'
        shell: bash
        run: |
          set -euo pipefail
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              build-essential \
              qt6-base-dev qt6-base-dev-tools || true
            sudo apt-get install -y --no-install-recommends \
              qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake || true
            sudo apt-get install -y --no-install-recommends libgl1 libglib2.0-0 || true
          fi

      - name: Check qmake (Linux only, full profile)
        if: runner.os == 'Linux' && env.BUILD_PYQT == 'true'
        shell: bash
        run: |
          set -euo pipefail
          which qmake6 || true
          which qmake || true
          qmake6 --version || true
          qmake --version || true
          if command -v qmake6 >/dev/null 2>&1; then echo "QMAKE=$(which qmake6)" >> $GITHUB_ENV; 
          elif command -v qmake >/dev/null 2>&1; then echo "QMAKE=$(which qmake)" >> $GITHUB_ENV; fi

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ "$PROFILE" = "full" ]; then
            if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install PyQt6; fi
          else
            pip install ffmpeg-python requests || true
          fi
          pip install pyinstaller

      - name: Install Linux extras (patchelf)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y patchelf
          fi

      - name: Build PyQt6 app (full profile only)
        if: env.BUILD_PYQT == 'true'
        shell: bash
        run: |
          pyinstaller --name ffmpeg-gui-pyqt6 --noconfirm --onefile --windowed GUI_pyqt6_WINFF.py

      - name: Build Tkinter app (always)
        shell: bash
        run: |
          pyinstaller --name ffmpeg-gui-tkinter --noconfirm --onefile --windowed GUI_tkinter_WINFF.py

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          arch_lc=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp dist/ffmpeg-gui-pyqt6.exe "artifacts/ffmpeg-gui-pyqt6-win-${arch_lc}.exe"
            cp dist/ffmpeg-gui-tkinter.exe "artifacts/ffmpeg-gui-tkinter-win-${arch_lc}.exe"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cd dist
            zip -r "../artifacts/ffmpeg-gui-pyqt6-macos-${arch_lc}.app.zip" "ffmpeg-gui-pyqt6.app"
            zip -r "../artifacts/ffmpeg-gui-tkinter-macos-${arch_lc}.app.zip" "ffmpeg-gui-tkinter.app"
            cd -
          else
            cp dist/ffmpeg-gui-pyqt6 "artifacts/ffmpeg-gui-pyqt6-linux-${arch_lc}"
            cp dist/ffmpeg-gui-tkinter "artifacts/ffmpeg-gui-tkinter-linux-${arch_lc}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-release-artifacts
          path: artifacts/*

  build_debian_bookworm:
    name: Build Debian 13 (bookworm) release artifacts
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies (Debian)
        shell: bash
        run: |
          set -euo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            python3 python3-pip python3-venv ca-certificates git \
            build-essential patchelf libgl1 libglib2.0-0 \
            qt6-base-dev qt6-base-dev-tools || true
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake || true
          update-ca-certificates || true

      - name: Check qmake (Debian)
        shell: bash
        run: |
          set -euo pipefail
          which qmake6 || true
          which qmake || true
          qmake6 --version || true
          qmake --version || true
          if command -v qmake6 >/dev/null 2>&1; then echo "QMAKE=$(which qmake6)" >> $GITHUB_ENV; 
          elif command -v qmake >/dev/null 2>&1; then echo "QMAKE=$(which qmake)" >> $GITHUB_ENV; fi

      - name: Install Python packages (Debian)
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; else python3 -m pip install PyQt6; fi
          python3 -m pip install pyinstaller requests ffmpeg-python

      - name: Build PyQt6 app (Debian)
        shell: bash
        run: |
          pyinstaller --name ffmpeg-gui-pyqt6 --noconfirm --onefile --windowed GUI_pyqt6_WINFF.py

      - name: Build Tkinter app (Debian)
        shell: bash
        run: |
          pyinstaller --name ffmpeg-gui-tkinter --noconfirm --onefile --windowed GUI_tkinter_WINFF.py

      - name: Package artifacts (Debian)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts pkg
          # Copy raw binaries
          cp dist/ffmpeg-gui-pyqt6 artifacts/ffmpeg-gui-pyqt6-debian-x64
          cp dist/ffmpeg-gui-tkinter artifacts/ffmpeg-gui-tkinter-debian-x64
          # Build simple .deb packages (version from CI run number)
          VER="${GITHUB_REF_NAME:-v0.0.0}"
          VER_DEB="${VER#v}"
          for app in ffmpeg-gui-pyqt6 ffmpeg-gui-tkinter; do
            pkgname=$(echo "$app" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            pkgdir="pkg/${pkgname}_${VER_DEB}_amd64"
            mkdir -p "$pkgdir/DEBIAN" "$pkgdir/usr/local/bin"
            cp "dist/${app}" "$pkgdir/usr/local/bin/${app}"
            chmod 0755 "$pkgdir/usr/local/bin/${app}"
            printf 'Package: %s\nVersion: %s\nSection: utils\nPriority: optional\nArchitecture: amd64\nMaintainer: GitHub Actions <noreply@github.local>\nDescription: FFmpeg GUI (%s) built via CI for Debian 13 (bookworm)\n' \
              "$pkgname" "$VER_DEB" "$app" > "$pkgdir/DEBIAN/control"
            dpkg-deb -b "$pkgdir" "artifacts/${pkgname}_${VER_DEB}_amd64.deb"
          done

      - name: Upload artifacts (Debian)
        uses: actions/upload-artifact@v4
        with:
          name: Debian-release-artifacts
          path: artifacts/*

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build, build_debian_bookworm]
    steps:
      - name: Download platform release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-release-artifacts"
          merge-multiple: true
          path: release-assets

      - name: Download Debian release artifacts
        uses: actions/download-artifact@v4
        with:
          name: Debian-release-artifacts
          path: release-assets
        continue-on-error: true

      - name: Show assets
        run: ls -la release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
