name: build-binaries

on:
  pull_request:
    branches: [ master ]
    paths:
      - '**/*.py'
      - '.github/workflows/**'
      - 'requirements.txt'
  push:
    branches:
      - master
      - ci-build-and-no-audio-asf
    paths:
      - '**/*.py'
      - '.github/workflows/**'
      - 'requirements.txt'
  workflow_dispatch: {}

jobs:
  build:
    name: Build PyInstaller binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-11-arm, macos-13, macos-14, ubuntu-latest, ubuntu-22.04-arm]
        python-version: ['3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Qt dev tools (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            # Try Qt6 first (qmake6 provided by qt6-base-dev-tools on Debian/Ubuntu)
            sudo apt-get install -y --no-install-recommends \
              build-essential \
              qt6-base-dev qt6-base-dev-tools || true
            # Fallback to Qt5 packages if Qt6 not available on the image
            sudo apt-get install -y --no-install-recommends \
              qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake || true
            # Useful runtime libs sometimes needed by PyInstaller apps
            sudo apt-get install -y --no-install-recommends libgl1 libglib2.0-0 || true
          fi

      - name: Check qmake (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          which qmake6 || true
          which qmake || true
          qmake6 --version || true
          qmake --version || true
          # Export QMAKE for downstream build tooling if present
          if command -v qmake6 >/dev/null 2>&1; then echo "QMAKE=$(which qmake6)" >> $GITHUB_ENV; 
          elif command -v qmake >/dev/null 2>&1; then echo "QMAKE=$(which qmake)" >> $GITHUB_ENV; fi

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install PyQt6; fi
          # Ensure common runtime deps are available for PyInstaller analysis
          pip install pyinstaller requests ffmpeg-python

      - name: Install Linux extras (patchelf)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y patchelf
          fi

      - name: Build PyQt6 app
        shell: bash
        run: |
          pyinstaller --name WINFF-GUI-PyQt6 --noconfirm --onefile --windowed GUI_pyqt6_WINFF.py

      - name: Build Tkinter app
        shell: bash
        run: |
          pyinstaller --name WINFF-GUI-Tkinter --noconfirm --onefile --windowed GUI_tkinter_WINFF.py

      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          arch_lc=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp dist/WINFF-GUI-PyQt6.exe "artifacts/WINFF-GUI-PyQt6-win-${arch_lc}.exe"
            cp dist/WINFF-GUI-Tkinter.exe "artifacts/WINFF-GUI-Tkinter-win-${arch_lc}.exe"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # Package .app bundles as zips, suffix with architecture
            cd dist
            zip -r "../artifacts/WINFF-GUI-PyQt6-macos-${arch_lc}.app.zip" "WINFF-GUI-PyQt6.app"
            zip -r "../artifacts/WINFF-GUI-Tkinter-macos-${arch_lc}.app.zip" "WINFF-GUI-Tkinter.app"
            cd -
          else
            # Linux artifacts (ELF executables), suffix with architecture
            cp dist/WINFF-GUI-PyQt6 "artifacts/WINFF-GUI-PyQt6-linux-${arch_lc}"
            cp dist/WINFF-GUI-Tkinter "artifacts/WINFF-GUI-Tkinter-linux-${arch_lc}"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-binaries
          path: artifacts/*

  build_debian_bookworm:
    name: Build Debian 13 (bookworm) binaries
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies (Debian)
        shell: bash
        run: |
          set -euo pipefail
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            python3 python3-pip python3-venv ca-certificates git \
            build-essential patchelf libgl1 libglib2.0-0 \
            qt6-base-dev qt6-base-dev-tools || true
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake || true
          update-ca-certificates || true

      - name: Check qmake (Debian)
        shell: bash
        run: |
          set -euo pipefail
          which qmake6 || true
          which qmake || true
          qmake6 --version || true
          qmake --version || true
          if command -v qmake6 >/dev/null 2>&1; then echo "QMAKE=$(which qmake6)" >> $GITHUB_ENV; 
          elif command -v qmake >/dev/null 2>&1; then echo "QMAKE=$(which qmake)" >> $GITHUB_ENV; fi

      - name: Install Python packages (Debian)
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; else python3 -m pip install PyQt6; fi
          python3 -m pip install pyinstaller requests ffmpeg-python

      - name: Build PyQt6 app (Debian)
        shell: bash
        run: |
          pyinstaller --name WINFF-GUI-PyQt6 --noconfirm --onefile --windowed GUI_pyqt6_WINFF.py

      - name: Build Tkinter app (Debian)
        shell: bash
        run: |
          pyinstaller --name WINFF-GUI-Tkinter --noconfirm --onefile --windowed GUI_tkinter_WINFF.py

      - name: Package artifacts (Debian)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts pkg
          # Copy raw binaries
          cp dist/WINFF-GUI-PyQt6 artifacts/WINFF-GUI-PyQt6-debian-x64
          cp dist/WINFF-GUI-Tkinter artifacts/WINFF-GUI-Tkinter-debian-x64
          # Build simple .deb packages (version from CI run number)
          VER="0.0.0-ci-${GITHUB_RUN_NUMBER:-0}"
          for app in WINFF-GUI-PyQt6 WINFF-GUI-Tkinter; do
            pkgname=$(echo "$app" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            pkgdir="pkg/${pkgname}_${VER}_amd64"
            mkdir -p "$pkgdir/DEBIAN" "$pkgdir/usr/local/bin"
            cp "dist/${app}" "$pkgdir/usr/local/bin/${app}"
            chmod 0755 "$pkgdir/usr/local/bin/${app}"
            printf 'Package: %s\nVersion: %s\nSection: utils\nPriority: optional\nArchitecture: amd64\nMaintainer: GitHub Actions <noreply@github.local>\nDescription: FFmpeg GUI (%s) built via CI for Debian 13 (bookworm)\n' \
              "$pkgname" "$VER" "$app" > "$pkgdir/DEBIAN/control"
            dpkg-deb -b "$pkgdir" "artifacts/${pkgname}_${VER}_amd64.deb"
          done

      - name: Upload artifacts (Debian)
        uses: actions/upload-artifact@v4
        with:
          name: Debian-binaries
          path: artifacts/*
