name: build-and-release-template

# How to use:
# 1) Copy this file to .github/workflows/build-and-release.yml in your repo.
# 2) Set APP_ENTRY_FILES to your Python entry points (space-separated).
# 3) Optionally adjust APP_NAMES to control output binary names.
# 4) Push to default branch to build; create a tag vX.Y.Z to publish a Release with assets.

on:
  # Template disabled by default to avoid unintentional runs/costs.
  # To use it, copy to a new workflow file and enable triggers explicitly.
  workflow_dispatch: {}

env:
  # Space-separated list of Python entry-point files to build
  APP_ENTRY_FILES: "app_gui_qt.py app_gui_tk.py"  # CHANGE ME
  # Matching space-separated list of output app names (no extension)
  APP_NAMES: "MyApp-PyQt MyApp-Tkinter"           # CHANGE ME

jobs:
  build:
    name: Build binaries (${{ matrix.os }} / py ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-11-arm, macos-13, macos-14, ubuntu-latest, ubuntu-22.04-arm]
        python-version: ['3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Install Qt dev tools (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              build-essential \
              qt6-base-dev qt6-base-dev-tools || true
            sudo apt-get install -y --no-install-recommends \
              qtbase5-dev qtbase5-dev-tools qtchooser qt5-qmake || true
            sudo apt-get install -y --no-install-recommends libgl1 libglib2.0-0 || true
          fi

      - name: Check qmake (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          which qmake6 || true
          which qmake || true
          qmake6 --version || true
          qmake --version || true
          if command -v qmake6 >/dev/null 2>&1; then echo "QMAKE=$(which qmake6)" >> $GITHUB_ENV; 
          elif command -v qmake >/dev/null 2>&1; then echo "QMAKE=$(which qmake)" >> $GITHUB_ENV; fi

      - name: Install Linux extras (patchelf)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y patchelf
          fi

      - name: Build apps with PyInstaller
        shell: bash
        run: |
          set -euo pipefail
          read -ra ENTRIES <<<"$APP_ENTRY_FILES"
          read -ra NAMES <<<"$APP_NAMES"
          if [ ${#ENTRIES[@]} -ne ${#NAMES[@]} ]; then
            echo "APP_ENTRY_FILES and APP_NAMES length mismatch" >&2
            exit 1
          fi
          for i in "${!ENTRIES[@]}"; do
            entry=${ENTRIES[$i]}
            name=${NAMES[$i]}
            echo "Building $entry -> $name"
            pyinstaller --name "$name" --noconfirm --onefile --windowed "$entry"
          done

      - name: Package artifacts (OS+arch suffixed)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          arch_lc=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            for f in dist/*.exe; do
              base=$(basename "$f" .exe)
              cp "$f" "artifacts/${base}-win-${arch_lc}.exe"
            done
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cd dist
            for app in *.app; do
              base=${app%.app}
              zip -r "../artifacts/${base}-macos-${arch_lc}.app.zip" "$app"
            done
            cd -
          else
            for f in dist/*; do
              base=$(basename "$f")
              cp "$f" "artifacts/${base}-linux-${arch_lc}"
            done
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ runner.arch }}-binaries
          path: artifacts/*

  release:
    name: Release on tag push
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-binaries"
          merge-multiple: true
          path: release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
